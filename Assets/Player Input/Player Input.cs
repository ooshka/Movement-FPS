//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Player Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Grounded"",
            ""id"": ""36892456-ad25-4061-887b-a26dbb928e6b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""95e9101a-3451-4334-8c78-434f1ec1d9f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b4ea58fc-a686-494f-8e39-d5a5fbb373ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""5108a93c-fe25-41d2-b23b-891990db48b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""e776fd9c-b86f-44d9-827b-cf908282f1fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4a385302-5aab-4ecc-a6a0-c229893e5b55"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41387ab3-5b3b-4f61-bb24-5531c482890a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""90273850-9885-46ae-bae0-d44045a2e4c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""58b1dd2f-6dcf-4566-94e7-201ec1ebe249"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""023e0553-1873-441e-a6f5-5ddb5bd83a3b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""ea5fbd15-5333-4100-b7f0-433815cf07cb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0e6cd7b4-1fd6-436b-ad7b-8ee2e368ba72"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc722e8d-ecb0-4700-9207-c22eb51a20aa"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5c8c7b31-1493-4b39-b398-21081c9d7903"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc772c40-6c2a-4b19-a673-c158e2ef26c6"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8551b157-c735-4ff2-b88a-f65bbdddc3d9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5671394-85e6-4acb-bb8f-4e9c5b4422ba"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8faa08b-69cc-4712-9c66-4e5972ec7cdd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef8598cc-9a0a-42a6-97f5-9ef6e2b98c78"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7cd2811-a1f9-4d03-be4b-9c4984f9a02d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""774177e0-f860-42a0-a6c4-e55e3ef58d61"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Wall Running"",
            ""id"": ""5285f965-e540-4aec-9b6c-230de7e06f6c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""59ffd2ed-5b59-467d-869c-e531f3705f55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0fe34386-7497-4089-879a-36d670a9feec"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""In Air"",
            ""id"": ""79539f6c-279e-4eff-aee7-9ad963cf49ca"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""fc0a7b59-05e7-475d-8351-49bdaaa84949"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48ae67f3-4dde-4632-9ad0-42f4143dbc40"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Grounded
        m_Grounded = asset.FindActionMap("Grounded", throwIfNotFound: true);
        m_Grounded_Movement = m_Grounded.FindAction("Movement", throwIfNotFound: true);
        m_Grounded_Jump = m_Grounded.FindAction("Jump", throwIfNotFound: true);
        m_Grounded_Look = m_Grounded.FindAction("Look", throwIfNotFound: true);
        m_Grounded_Crouch = m_Grounded.FindAction("Crouch", throwIfNotFound: true);
        // Wall Running
        m_WallRunning = asset.FindActionMap("Wall Running", throwIfNotFound: true);
        m_WallRunning_Newaction = m_WallRunning.FindAction("New action", throwIfNotFound: true);
        // In Air
        m_InAir = asset.FindActionMap("In Air", throwIfNotFound: true);
        m_InAir_Newaction = m_InAir.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grounded
    private readonly InputActionMap m_Grounded;
    private IGroundedActions m_GroundedActionsCallbackInterface;
    private readonly InputAction m_Grounded_Movement;
    private readonly InputAction m_Grounded_Jump;
    private readonly InputAction m_Grounded_Look;
    private readonly InputAction m_Grounded_Crouch;
    public struct GroundedActions
    {
        private @PlayerInput m_Wrapper;
        public GroundedActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Grounded_Movement;
        public InputAction @Jump => m_Wrapper.m_Grounded_Jump;
        public InputAction @Look => m_Wrapper.m_Grounded_Look;
        public InputAction @Crouch => m_Wrapper.m_Grounded_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_Grounded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundedActions set) { return set.Get(); }
        public void SetCallbacks(IGroundedActions instance)
        {
            if (m_Wrapper.m_GroundedActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnLook;
                @Crouch.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_GroundedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public GroundedActions @Grounded => new GroundedActions(this);

    // Wall Running
    private readonly InputActionMap m_WallRunning;
    private IWallRunningActions m_WallRunningActionsCallbackInterface;
    private readonly InputAction m_WallRunning_Newaction;
    public struct WallRunningActions
    {
        private @PlayerInput m_Wrapper;
        public WallRunningActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_WallRunning_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_WallRunning; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WallRunningActions set) { return set.Get(); }
        public void SetCallbacks(IWallRunningActions instance)
        {
            if (m_Wrapper.m_WallRunningActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_WallRunningActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_WallRunningActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_WallRunningActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_WallRunningActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public WallRunningActions @WallRunning => new WallRunningActions(this);

    // In Air
    private readonly InputActionMap m_InAir;
    private IInAirActions m_InAirActionsCallbackInterface;
    private readonly InputAction m_InAir_Newaction;
    public struct InAirActions
    {
        private @PlayerInput m_Wrapper;
        public InAirActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InAir_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InAir; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InAirActions set) { return set.Get(); }
        public void SetCallbacks(IInAirActions instance)
        {
            if (m_Wrapper.m_InAirActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_InAirActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_InAirActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_InAirActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_InAirActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public InAirActions @InAir => new InAirActions(this);
    public interface IGroundedActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IWallRunningActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInAirActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
